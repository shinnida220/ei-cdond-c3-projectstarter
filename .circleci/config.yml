version: 2.1

orbs:
  slack: circleci/slack@4.10.1

os_default: &os_default
  docker:
    - image: circleci/node:13.8.0

os_aws_image: &os_aws_image
  docker:
    - image: amazon/aws-cli

os_ansible_supported: &os_ansible_supported
  docker:
    - image: python:3.7-alpine3.11

notify_channel_for_error: &notify_channel_for_error
  slack/notify:
    channel: C03DAJYL3SM
    event: fail
    template: basic_fail_1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backendStackName:
        type: string
      frontendStackName:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.backendStackName >> "
            aws cloudformation delete-stack \
              --stack-name << parameters.backendStackName >> \
              --region us-east-1

            echo "Destroying environment: << parameters.backendStackName >> "              
            aws cloudformation delete-stack \
              --stack-name << parameters.frontendStackName >> \
              --region us-east-1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://api.thisdb.com/v1/${THISDB_BUCKET}/migration_<< parameters.workflowID >>" -H "X-Api-Key: ${THISDB_ACCESS_KEY}")
            if(( $SUCCESS=='SUCCESS' )); 
            then
              cd ~/project/backend
              npm install
              npm run migrate:revert
            fi

jobs:
  build-frontend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - <<: *notify_channel_for_error

  deploy-infrastructure:
    <<: *os_aws_image
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            EC2IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "EC2 IP ADDRESS: ${EC2IP}"
            echo "${EC2IP}" >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          backendStackName: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontendStackName: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    <<: *os_ansible_supported
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["${SSH_FINGERPRINT}"]
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies (Ansible)
          command: |
            apk add ansible
            pip install awscli
            # Lets check the version
            aws --version

      # - run: apk add gcompat
      # - run:
      #     name: Setup AWS CLI
      #     command: |
      #       AWS_CLI_VER=2.0.30
      #       apk update && apk add --no-cache curl gcompat zip &&  \
      #       curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VER}.zip -o awscliv2.zip && \
      #       unzip awscliv2.zip && ./aws/install
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          backendStackName: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontendStackName: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    <<: *os_default
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to ThisDb key-value store
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure "https://api.thisdb.com/v1/${THISDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}" -H "X-Api-Key: ${THISDB_ACCESS_KEY}" -d 'SUCCESS'
            fi

      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          backendStackName: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontendStackName: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    <<: *os_ansible_supported
    steps:
      - checkout
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies Node, tar, AWSCLI
          command: |
            # apk add --update --no-cache tar gzip curl nodejs npm tree aws-cli
            apk add nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          backendStackName: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontendStackName: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    <<: *os_ansible_supported
    steps:
      - checkout
      - run: apk add --update tar gzip
      - add_ssh_keys:
          fingerprints: ["${SSH_FINGERPRINT}"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies Ansible, tar, AWSCLI, NPM
      #     command: |
      #       apk add --update --no-cache tar gzip ansible curl nodejs npm tree aws-cli
      - run:
          name: Install dependencies (Ansible)
          command: |
            apk add ansible nodejs npm
            pip install awscli
            # Lets check the version
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # Lets see what we have here..
            ls -lh
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          backendStackName: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontendStackName: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure

  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          context: buildbot-for-cicd-project
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
